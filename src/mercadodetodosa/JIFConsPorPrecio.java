/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mercadodetodosa;

import java.util.Collections;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nahue
 */
public class JIFConsPorPrecio extends javax.swing.JInternalFrame {

    /**
     * Creates new form JIFConsPorPrecio
     */
    public JIFConsPorPrecio() {
        initComponents();
        armarCabecera();
        JFMenuGeneral.alProdPrecio.addAll(JFMenuGeneral.tsProductos);
        Collections.sort(JFMenuGeneral.alProdPrecio, Ordenamientos.porPrecio);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlIngPre = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtProductos = new javax.swing.JTable();
        jlTitConsProd = new javax.swing.JLabel();
        jlListaProductos = new javax.swing.JLabel();
        jlMin = new javax.swing.JLabel();
        jlMax = new javax.swing.JLabel();
        jtfPrecioMax = new javax.swing.JTextField();
        jtfPrecioMin = new javax.swing.JTextField();
        jlAdverRango = new javax.swing.JLabel();
        jlAdverLista = new javax.swing.JLabel();

        setClosable(true);

        jlIngPre.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlIngPre.setText("Ingrese el rango de precios:");

        jtProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtProductos);

        jlTitConsProd.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jlTitConsProd.setText("Consulta de productos por precio");

        jlListaProductos.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlListaProductos.setText("Lista de productos");

        jlMin.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlMin.setText("Min");

        jlMax.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jlMax.setText("Max");

        jtfPrecioMax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPrecioMaxKeyReleased(evt);
            }
        });

        jtfPrecioMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfPrecioMinKeyReleased(evt);
            }
        });

        jlAdverRango.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        jlAdverRango.setForeground(new java.awt.Color(255, 0, 0));

        jlAdverLista.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlAdverLista, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlIngPre)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlMin)
                        .addGap(18, 18, 18)
                        .addComponent(jtfPrecioMin, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jlMax)
                        .addGap(18, 18, 18)
                        .addComponent(jtfPrecioMax, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jlAdverRango, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(28, 28, 28)
                            .addComponent(jlTitConsProd)))
                    .addComponent(jlListaProductos))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlTitConsProd)
                .addGap(18, 18, 18)
                .addComponent(jlIngPre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlMin)
                    .addComponent(jlMax)
                    .addComponent(jtfPrecioMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfPrecioMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlAdverRango, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlListaProductos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlAdverLista, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtfPrecioMinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPrecioMinKeyReleased
        try {
            borrarFilas();
            mostrarProductos();
            if (Float.parseFloat(jtfPrecioMax.getText()) < Float.parseFloat(jtfPrecioMin.getText())) {
                jlAdverRango.setText("El valor ingresado de el campo \"Max\" no puede ser menor que el de \"Min\".");
            } else {
                jlAdverRango.setText("");
            }
            if (Float.parseFloat(jtfPrecioMax.getText()) < -1 || Float.parseFloat(jtfPrecioMin.getText()) < -1) {
                jlAdverRango.setText("Se debe ingresar un número real no negativo en ambos campos.");
            }
        } catch (NumberFormatException nfe) {
            jlAdverRango.setText("Se debe ingresar un número real no negativo en ambos campos.");
        }
    }//GEN-LAST:event_jtfPrecioMinKeyReleased

    private void jtfPrecioMaxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPrecioMaxKeyReleased
        try {
            borrarFilas();
            mostrarProductos();
            if (Float.parseFloat(jtfPrecioMax.getText()) < Float.parseFloat(jtfPrecioMin.getText())) {
                jlAdverRango.setText("El valor ingresado de el campo \"Max\" no puede ser menor que el de \"Min\".");
            } else {
                jlAdverRango.setText("");
            }
            if (Float.parseFloat(jtfPrecioMax.getText()) < -1 || Float.parseFloat(jtfPrecioMin.getText()) < -1) {
                jlAdverRango.setText("Se debe ingresar un número real no negativo en ambos campos.");
            }
        } catch (NumberFormatException nfe) {
            jlAdverRango.setText("Se debe ingresar un número real no negativo en ambos campos.");
        }
    }//GEN-LAST:event_jtfPrecioMaxKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jlAdverLista;
    private javax.swing.JLabel jlAdverRango;
    private javax.swing.JLabel jlIngPre;
    private javax.swing.JLabel jlListaProductos;
    private javax.swing.JLabel jlMax;
    private javax.swing.JLabel jlMin;
    private javax.swing.JLabel jlTitConsProd;
    private javax.swing.JTable jtProductos;
    private javax.swing.JTextField jtfPrecioMax;
    private javax.swing.JTextField jtfPrecioMin;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int i, int i1) {
            return false;
        }

    };

    // métodos extra
    private void armarCabecera() {
        modelo.addColumn("Código");
        modelo.addColumn("Descripción");
        modelo.addColumn("Precio");
        modelo.addColumn("Stock");
        jtProductos.setModel(modelo);
    }

    private void mostrarProductos() {
        for (Producto prod : JFMenuGeneral.alProdPrecio) {
            if (prod.getPrecio() >= Float.parseFloat(jtfPrecioMin.getText()) && prod.getPrecio() <= Float.parseFloat(jtfPrecioMax.getText())) {
                modelo.addRow(new Object[]{prod.getCodigo(), prod.getDescripcion(), prod.getPrecio(), prod.getStock()});
            }
        }
        if (jtProductos.getRowCount() == 0) {
            jlAdverLista.setText("No se han encontrado productos dentro de este rango.");
        } else {
            jlAdverLista.setText("");
        }
    }

    private void borrarFilas() {
        int indFil = jtProductos.getRowCount() - 1;
        for (; indFil >= 0; indFil--) {
            modelo.removeRow(indFil);
        }
    }
}
